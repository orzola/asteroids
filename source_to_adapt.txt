# Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
energy = 100
started = False
rock_group = set([])
rock_time_spawn = 1500.0
missile_group = set([])
explosion_group = set ([])
debug = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")
nebula_basic_info = ImageInfo([400, 300], [800, 600])
nebula_basic_image = simplegui.load_image("http://i.imgur.com/iJRblex.jpg")
# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
#ship_info = ImageInfo([45, 45], [90, 90], 35)
#ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://i.imgur.com/GxRKBFx.png")

ship_image_reverse = simplegui.load_image("http://i.imgur.com/hbyPkKq.png")
ship_image_strafe_l = simplegui.load_image("http://i.imgur.com/fksbG3t.png")
ship_image_strafe_r = simplegui.load_image("http://i.imgur.com/nvkVd95.png")
ship_image_rotate_l = simplegui.load_image("http://i.imgur.com/ld021Z0.png")
ship_image_rotate_r = simplegui.load_image("http://i.imgur.com/YmZls3L.png")
ship_image_shield = simplegui.load_image("http://i.imgur.com/cgPUJD1.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 30)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
ship_shield_sound = simplegui.load_sound("http://soundfxnow.com/soundfx/Electricity3.mp3")
ship_teleport_sound = simplegui.load_sound("http://soundfxnow.com/soundfx/Electricity7.mp3")

#ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
ship_thrust_sound = simplegui.load_sound("http://soundfxnow.com/soundfx/HelicopterStartup.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# volume
missile_sound.set_volume(1)
soundtrack.set_volume(1)
ship_thrust_sound.set_volume(.5)
ship_shield_sound.set_volume(.5)
ship_teleport_sound.set_volume(.7)

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, ang_vel, image, image_strafe_l,
                 image_strafe_r, image_rotate_l, image_rotate_r, image_reverse,
                 image_shield, info, thrust, break_on, shoot, strafe_l,
                 strafe_r, shield_on, image_variation, rotate_l, rotate_r):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.strafe_l = False
        self.strafe_r = False
        self.break_on = False
        self.shield_on = False
        self.rotate_l = False
        self.rotate_r = False
        self.image_variation = 0
        self.angle = angle
        self.angle_vel = ang_vel
        self.image = image
        self.image_strafe_l = image_strafe_l
        self.image_strafe_r = image_strafe_r
        self.image_rotate_l = image_rotate_l
        self.image_rotate_r = image_rotate_r
        self.image_reverse = image_reverse
        self.image_shield = image_shield        
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def thrust_control(self):
        ''' Increase position velocity if keydown UP is active''' 
        if self.thrust == True and self.shield_on == False:
            
            self.image_variation = 90
            ship_thrust_sound.play()
            
            #calculate new coordinate with vector of actual angle
            forward = angle_to_vector(self.angle)
            self.vel[0] += forward[0]* .2
            self.vel[1] += forward[1]* .2
        
        #friction. Reduce velocity by small percentage
        self.vel[0] *= .95
        self.vel[1] *= .95
    
    def thrust_strafe_l(self):
        ''' Increase position velocity if keydown A is active.
            Use half PI to calculate 90 grade angle'''

        if self.strafe_l == True and self.shield_on == False:
            
            ship_thrust_sound.play()
            
            #calculate new coordinate with vector of actual angle
            variation = self.angle - 1.5
            forward = angle_to_vector(variation)
            self.vel[0] += forward[0]* .05
            self.vel[1] += forward[1]* .05

    def thrust_strafe_r(self):
        ''' Increase position velocity by if keydown S is active
            Use half PI to calculate 90 grade angle'''
        if self.strafe_r == True and self.shield_on == False:
            
            ship_thrust_sound.play()
            
            #calculate new coordinate with vector of actual angle
            variation = self.angle + 1.5
            forward = angle_to_vector(variation)
            self.vel[0] += forward[0]* .05
            self.vel[1] += forward[1]* .05            

    def thrust_break(self):
        ''' Increase position velocity by if keydown DOWN is active
            Use negative value for reverse gear'''
        if self.break_on == True and self.shield_on == False:
            
            ship_thrust_sound.play()
            
            #calculate new coordinate with vector of actual angle
            forward = angle_to_vector(self.angle)
            self.vel[0] -= forward[0]* .05
            self.vel[1] -= forward[1]* .05
    
    def rotate_left_control(self):
        ''' Increase rotate velocity by if keydown LEFT is active'''
        if self.rotate_l == True and self.shield_on == False:    
            self.angle_vel = -0.07
            
    def rotate_right_control(self):
        ''' Increase rotate velocity by if keydown RIGHT is active'''        
        if self.rotate_r == True and self.shield_on == False:    
            self.angle_vel = 0.07   
                        
    def shield_control(self):
        ''' Reduce friction if keydown Q is active'''
        global energy
        if self.shield_on == True:
            energy -= 0.5
            
            #reduce friction
            self.vel[0] *= 1.03
            self.vel[1] *= 1.03
        
    def image_center_variation(self):
        return self.image_variation
    
    def shoot(self):
        ''' Shoot missiles
        calculate tip of the cannon = ship possition + ship radius * vector ship radius
        calculate velocity = ship angle + speed * vector ship angle '''
        global a_missile, energy
        energy -= 1
        v = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * v[0], self.pos[1] + self.radius * v[1]]
        missile_vel = [v[0] + 5 * v[0], v[1] + 5 * v[1]]
        a_missile = Sprite(missile_pos, missile_vel, 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)        
        
    def draw(self,canvas):
        if self.thrust == True and self.shield_on == False:
           canvas.draw_image(self.image, [(my_ship.image_center[0] + self.image_variation), my_ship.image_center[1]], self.image_size, self.pos, self.image_size, self.angle)
        elif self.shield_on == True:
           canvas.draw_image(self.image_shield, self.image_center, self.image_size, self.pos, self.image_size, self.angle)        
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
            
        if self.strafe_l == True and self.shield_on == False:
            canvas.draw_image(self.image_strafe_l, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
        if self.strafe_r == True and self.shield_on == False:
            canvas.draw_image(self.image_strafe_r, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
        if self.rotate_l == True and self.shield_on == False:
            canvas.draw_image(self.image_rotate_l, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
        if self.rotate_r == True and self.shield_on == False:
            canvas.draw_image(self.image_rotate_r, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
        if self.break_on == True and self.shield_on == False:
            canvas.draw_image(self.image_reverse, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
                
        #rotate velocity
        if self.shield_on == False:
            self.angle += self.angle_vel
        
        #position velocity
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
    def update(self):
        self.thrust_control()
        self.thrust_break()
        self.thrust_strafe_l()
        self.thrust_strafe_r()
        self.shield_control()
        self.rotate_left_control()
        self.rotate_right_control()
       
        # wrap
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # energy control
        global energy
        if energy <= 0:
            self.shield_on = False
        if energy < 101:
            energy += 0.1

                    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        global debug
        #debug
        if debug == True:
            # canvas.draw_circle(self.pos, self.radius, 1, "Red", "Black")
            p = self.pos
            v = self.vel
            a = [(p[0] + v[0]), (p[1] + v[1])]
            b = [(p[0] + v[0]+70), (p[1] + v[1])+20]
            c = [(p[0] + v[0]+10), (p[1] + v[1]+70)]
            canvas.draw_polygon([a, b, c], 1, "Green",)
            canvas.draw_line(my_ship.pos, self.pos, 1, "White")
            canvas.draw_text(str(int(dist(self.pos, my_ship.pos))), (self.pos[0]-10,self.pos[1]+10), 10, "White") 
            canvas.draw_text(str(self.vel), (self.pos[0]-10,self.pos[1]), 10, "White")
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
        self.angle += .045
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        if self.animated == True:
            center = [self.image_center[0]+(self.image_center[0] * self.age), self.image_center[1]]
            canvas.draw_image(self.image, center, self.image_size, self.pos, self.image_size, self.angle)                

    def update(self):
        # wrap
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        # age
        self.age += 1
        if self.age >= self.lifespan:
            return False

    #check collisions
    def collide(self, other_object):
        if dist(self.pos, other_object.pos) < (self.radius + other_object.radius):
            return True
           
def draw(canvas):
    global score, time, lives, energy, started, rock_group, rock_time_spawn, missile_group
    
    # animate background
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    #debug
    if debug == False:
        canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
        canvas.draw_image(debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], 
                                [WIDTH / 2 + 1.25 * wtime, HEIGHT / 2], [WIDTH - 2.5 * wtime, HEIGHT])
        canvas.draw_image(debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], 
                                [1.25 * wtime, HEIGHT / 2], [2.5 * wtime, HEIGHT])
    else:
        canvas.draw_image(nebula_basic_image, nebula_basic_info.get_center(), nebula_basic_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
        
    # draw lives, score, fuel & teleport
    canvas.draw_text("Lives: " + str(lives), (30, 30), 20, "White")
    canvas.draw_text("Score: " + str(score), (660, 30), 20, "White")
    canvas.draw_text("Energy: ", (350, 30), 20, "White")
    canvas.draw_line((412, 25), (412 + int(energy), 25), 15, "Yellow")

    
    # draw ship and sprites
    my_ship.draw(canvas)
    process_sprite_group(rock_group,canvas)
    process_sprite_group(missile_group,canvas)
    process_sprite_group(explosion_group,canvas)
    
    # update ship and sprites
    my_ship.update()
    a_rock.update()
    a_missile.update()
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    # check collides
    if group_collide(rock_group, my_ship) == True and my_ship.shield_on == False:
        lives -= 1
    
    group_group_collide(rock_group, missile_group)
    
    # game restart
    if lives == 0:
        score = 0
        lives = 3
        time = 0.5
        energy = 100
        started = False
        rock_group = set([])
        rock_time_spawn = 1500.0
        missile_group = set([])
        soundtrack.pause()
        soundtrack.rewind()
 
# keyboard controls    
def keydown(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.rotate_l = True
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.rotate_r = True
    elif key == simplegui.KEY_MAP["a"]:
        my_ship.strafe_l = True
    elif key == simplegui.KEY_MAP["s"]:
        my_ship.strafe_r = True
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True
    elif key == simplegui.KEY_MAP["down"]:
        my_ship.break_on = True
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        missile_sound.play()
    elif key == simplegui.KEY_MAP["q"]:
        my_ship.shield_on = True
        ship_thrust_sound.pause()
        ship_shield_sound.play()
    elif key == simplegui.KEY_MAP["t"]:
        wormhole()
        
def keyup(key):
    if key == simplegui.KEY_MAP["left"]or key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
        my_ship.rotate_l = False
        my_ship.rotate_r = False
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()
    elif key == simplegui.KEY_MAP["a"]:
        my_ship.strafe_l = False
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()
    elif key == simplegui.KEY_MAP["s"]:
        my_ship.strafe_r = False
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()        
    elif key == simplegui.KEY_MAP["down"]:    
        my_ship.break_on = False
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()
    elif key == simplegui.KEY_MAP["q"]:
        my_ship.shield_on = False
        ship_shield_sound.pause()
        ship_shield_sound.rewind()

# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    soundtrack.play()
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True

# debug button
def button_debug():
    global debug
    if debug == False:
        debug = True
    else:
        debug = False
    
# timer handler and function to control wormholes        
def wormhole():
    global energy
    if energy >= 50:
        ship_teleport_sound.play()
        my_ship.pos = [random.randrange(60, WIDTH - 60), random.randrange(60, HEIGHT - 60)]
        energy -= 50
  
# timer handler that spawns a rock    
def rock_spawner():
    global a_rock, rock_group
    if started:
        x = random.randrange(0, WIDTH)
        y = random.randrange(0, HEIGHT)
        a_rock = Sprite([x, y], [(random.randrange(-10, 10)/10), (random.randrange(-2, 2)/10)], 0, 0, asteroid_image, asteroid_info) 
        if (len(rock_group) < 13) and ((dist(my_ship.pos, [x, y]) > 200) or (dist(a_rock.pos, [x, y]) > 100)):
            rock_group.add(a_rock)
    
# collision handler 
def group_collide(rock_group, other_object):
    for i in list(rock_group):
        if i.collide(other_object):
            rock_group.remove(i)
            explosion_group.add(Sprite(i.pos, [0,0], 0, 0, explosion_image, explosion_info, explosion_sound))
            return True

# collision rock/missile handler 
def group_group_collide(group1, group2):
    global score, rock_time_spawn
    for i in list(group1):
        if group_collide(group2, i):
            rock_group.remove(i)
            score += 100
            rock_time_spawn -= 10.0
       
# handler to draw groups
def process_sprite_group(group, canvas):
    for i in group:
        i.draw(canvas)
        Sprite.update(i)
        # remove if lifespan true
        if Sprite.update(i) == False:
            group.remove(i)
     
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship, missile and rocks
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, 0, ship_image, ship_image_strafe_l,
               ship_image_strafe_r, ship_image_rotate_l, ship_image_rotate_r,
               ship_image_reverse, ship_image_shield, ship_info, 0,0,0,0,0,0,0,0,0)
a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [(random.randrange(-10, 10)/10), (random.randrange(-4, 4)/10)], 0, 0, asteroid_image, asteroid_info) 
a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

label_up = frame.add_label("Label_up")
label_up.set_text("UP - Foward")
label_down = frame.add_label("Label_down")
label_down.set_text("DOWN - Reverse")
label_turn = frame.add_label("Label_turn")
label_turn.set_text("LEFT/RIGHT - Turn")
label_strafe = frame.add_label("Label_strafe")
label_strafe.set_text("A/S - Strafe")
label_space = frame.add_label("Label_space")
label_space.set_text("Space - Shoot - 1e")
label_shield = frame.add_label("Label_shield")
label_shield.set_text("Q - Shield - 0.5e")
label_teleport = frame.add_label("Label_teleport")
label_teleport.set_text("T - Shield - 50e")


button1 = frame.add_button("Vectrex mode", button_debug)

# register timers
timer = simplegui.create_timer(rock_time_spawn, rock_spawner)

# get things rolling
timer.start()
frame.start()